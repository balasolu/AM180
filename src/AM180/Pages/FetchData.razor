@page "/fetchdata"
@inject IDistributedCache _cache;

<PageTitle>Weather forecast</PageTitle>

@using AM180.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="async () => await OnForecastClickedAsync()">Load Forecast</button>

@if (forecasts == null && loadedFrom == null)
{
    <p><em>Click the button to load a forecast</em></p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @cacheDataCss">@loadedFrom</div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    string? loadedFrom = null;
    string? cacheDataCss = null;

    public async Task OnForecastClickedAsync()
    {
        forecasts = null;
        loadedFrom = null;
        string recordKey = string.Join("weatherforecast_", DateTime.UtcNow.ToString("yyyyMMdd_hhmm"));
        forecasts = await _cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (forecasts == null)
        {
            forecasts = await ForecastService.GetForecastAsync(DateTime.UtcNow);
            loadedFrom = $"loaded from api @ {DateTime.UtcNow}";
            cacheDataCss = string.Empty;
            await _cache.SetRecordAsync(recordKey, forecasts);
        }
        else
        {
            loadedFrom = $"loaded from cache @ {DateTime.UtcNow}";
            cacheDataCss = "text-danger";
        }
    }
}

