@using Microsoft.AspNetCore.Components;
@using System.Text.RegularExpressions;

<div class="d-flex flex-column input-group m-1" style="width: 22.5rem;">
    <div class="d-flex justify-content-center m-1">
        <input type="email" class="@InputClass" placeholder="Email" @oninput="async args => { await OnEmailChangedAsync(args); }" />
    </div>
    <div class="d-flex justify-content-center m-1 @FeedbackClass">
        @FeedbackContent
    </div>
</div>

@code{
    [Parameter]
    public string? Email { get; set; }
    [Parameter]
    public EventCallback<string?> EmailChanged { get; set; }
    [Parameter]
    public bool Validate { get; set; }
    [Parameter]
    public bool InputValid { get; set; }
    [Parameter]
    public EventCallback<bool> InputValidChanged { get; set; }

    Model model = new();

    class Model
    {
        public string? Email { get; set; }
        public bool InputValid { get; set; }
    }

    string? InputClass
    {
        get
        {
            if (Validate)
                return model.InputValid ? "form-control is-valid" : "form-control is-invalid";
            return "form-control";
        }
    }

    string? FeedbackClass =>
        model.InputValid ? "valid-feedback" : "invalid-feedback";
    string? FeedbackContent =>
        model.InputValid ? "looks good!" : "name@example.com";

    public async Task OnEmailChangedAsync(ChangeEventArgs args)
    {
        var value = args.Value != null ? (string)args.Value : string.Empty;
        model.Email = Email = value;
        await EmailChanged.InvokeAsync(Email);
        await UpdateValidityAsync();
    }

    async Task UpdateValidityAsync()
    {
        if (!string.IsNullOrEmpty(model.Email))
        {
            try
            {
                var valid = model.Email == new MailAddress(model.Email).Address;
                model.InputValid = InputValid = valid;
            }
            catch
            {
                model.InputValid = InputValid = false;
            }
        }
        else
            model.InputValid = InputValid = false;
        await InputValidChanged.InvokeAsync(InputValid);
    }
}

