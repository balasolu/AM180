@inject SignInManager<User> _signInManager;
@inject UserManager<User> _userManager;
@inject IUserStore<User> _userStore;
@inject NavigationManager _navigationManager;
@inject IHostEnvironmentAuthenticationStateProvider _hostEnvironmentAuthenticationStateProvider;
@inject IAuthService _authService;
@inject IDbContextFactory<DefaultDbContext> _defaultDbContextFactory;

<div class="container-fluid my-1" style="width: 22.5rem;">
    <div class="d-flex flex-column">
        <div class="d-flex justify-content-center mt-1">
            <h1 class="text-center">Register</h1>
        </div>
        <div class="d-flex justify-content-center my-1">
            <div class="d-flex flex-column">
                <div class="d-flex justify-content-center">
                    @model.Feedback
                </div>
                <div class="d-flex justify-content-center">
                    <UsernameInput Validate=true @bind-Username="model.Username" @bind-InputValid="model.UsernameValid" />
                </div>
                <div class="d-flex justify-content-center">
                    <EmailInput Validate=true @bind-Email="model.Email" @bind-InputValid="model.EmailValid" />
                </div>
                <div class="d-flex justify-content-center">
                    <PasswordInput Validate=true @bind-Password="model.Password" @bind-InputValid="model.PasswordValid" />
                </div>
                <div class="d-flex justify-content-center">
                    @if (model.IsBusy)
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()" disabled>Register</button>
                    }
                    else
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()">Register</button>
                    }
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center mb-1">
            <a class="btn btn-secondary m-1" href="/login">Have account?</a>
            <a class="btn btn-secondary m-1" href="/reset">Can't log in?</a>
        </div>
    </div>
</div>

@code {
    Model model = new();

    class Model
    {
        public bool Initialized { get; set; }
        public bool PasswordVisible { get; set; }
        public bool UsernameValid { get; set; }
        public bool EmailValid { get; set; }
        public bool PasswordValid { get; set; }
        public string? Feedback { get; set; }
        public bool IsBusy { get; set; }

        string? username;
        public string? Username { get => username ??= string.Empty; set => username = value; }

        string? email;
        public string? Email { get => email ??= string.Empty; set => email = value; }

        string? password;
        public string? Password { get => password ??= string.Empty; set => password = value; }

        string? passwordConfirm;
        public string? PasswordConfirm { get => passwordConfirm ??= string.Empty; set => passwordConfirm = value; }
    }

    protected override void OnInitialized()
    {
        model.Initialized = true;
    }

    async Task OnClickedAsync()
    {
        model.IsBusy = true;
        await Task.Delay(1500);
        if (model.UsernameValid && model.EmailValid && model.PasswordValid)
        {
        }
        model.IsBusy = false;
    }
}