@using System.Text
@inject SignInManager<User> _signInManager;
@inject UserManager<User> _userManager;
@inject IUserStore<User> _userStore;
@inject NavigationManager _navigationManager;
@inject IHostEnvironmentAuthenticationStateProvider _hostEnvironmentAuthenticationStateProvider;
@inject IAuthService _authService;
@inject IDbContextFactory<DefaultDbContext> _defaultDbContextFactory;
@inject IPasswordHasher<User> _passwordHasher;

<div class="container-fluid m-1" style="width: 22.5rem;">
    <div class="d-flex flex-column">
        <div class="d-flex justify-content-center m-1">
            <h1 class="text-center">Register</h1>
        </div>
        <div class="d-flex justify-content-center m-1">
            <div class="d-flex flex-column">
                <div class="d-flex justify-content-center">
                    @model.Feedback
                </div>
                <div class="d-flex justify-content-center">
                    <EmailInput Validate=true @bind-Email="model.Email" @bind-InputValid="model.EmailValid" />
                </div>
                <div class="d-flex justify-content-center">
                    <PasswordInput Validate=true @bind-Password="model.Password" @bind-InputValid="model.PasswordValid" />
                </div>
                <div class="d-flex justify-content-center">
                    @if (model.IsBusy)
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()" disabled>Register</button>
                    }
                    else
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()">Register</button>
                    }
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center m-1">
            <a class="btn btn-secondary m-1" href="/login">Have account?</a>
            <a class="btn btn-secondary m-1" href="/reset">Can't log in?</a>
        </div>
    </div>
</div>

@code {
    Model model = new();

    class Model
    {
        public bool Initialized { get; set; }
        public bool PasswordVisible { get; set; }
        public bool EmailValid { get; set; }
        public bool PasswordValid { get; set; }
        public string? Feedback { get; set; }
        public bool IsBusy { get; set; }

        string? email;
        public string? Email { get => email ??= string.Empty; set => email = value; }

        string? password;
        public string? Password { get => password ??= string.Empty; set => password = value; }
    }

    protected override void OnInitialized()
    {
        model.Initialized = true;
    }

    async Task OnClickedAsync()
    {
        model.IsBusy = true;
        try
        {
            if (!string.IsNullOrEmpty(model.Email) && !string.IsNullOrEmpty(model.Password))
            {
                if (model.EmailValid && model.PasswordValid)
                {
                    using var context = await _defaultDbContextFactory.CreateDbContextAsync();
                    if (context.Users != null)
                    {
                        var id = Convert.ToBase64String(Encoding.UTF8.GetBytes(model.Email));
                        var exists = await context.Users.AnyAsync(x => x.Id == id);
                        if (!exists)
                        {
                            var user = new DefaultUser()
                                {
                                    Id = id,
                                    CreatedAt = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                                    Email = model.Email,
                                    UserName = model.Email
                                };
                            var result = await _userManager.CreateAsync(user, model.Password);
                            if (result.Succeeded)
                            {
                                _hostEnvironmentAuthenticationStateProvider.SetAuthenticationState(_authService.BuildAuthenticationStateAsync(model.Email ?? string.Empty));
                                _navigationManager.NavigateTo("/account/manage");
                                //await _emailService.SendEmailAsync(model.Email!, $"{user.UserName} account  confirmation", AuthService.GenerateConfirmationToken(user).Hash);
                            }
                            else
                            {
                                var error = result.Errors.FirstOrDefault();
                                model.Feedback = error != null ? error.Description : string.Empty;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            model.Feedback = e.Message;
        }
        finally
        {
            model.IsBusy = false;
        }
    }
}