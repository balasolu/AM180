@inject NavigationManager _navigationManager;
@inject IHostEnvironmentAuthenticationStateProvider _hostEnvironmentAuthenticationStateProvider;
@inject IAuthService _authService;

<div class="container-fluid m-1" style="width: 22.5rem;">
    <div class="d-flex flex-column">
        <div class="d-flex justify-content-center m-1">
            <h1 class="text-center">Reset</h1>
        </div>
        <div class="d-flex justify-content-center m-1">
            <div class="d-flex flex-column">
                <div class="d-flex justify-content-center">
                    <EmailInput @bind-Email="model.Email" />
                </div>
                <div class="d-flex justify-content-center m-1">
                </div>
                <div class="d-flex justify-content-center">
                    @if (model.IsBusy)
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()" disabled>Reset password</button>
                    }
                    else
                    {
                        <button class="btn btn-primary m-1" @onclick="async () => await OnClickedAsync()">Reset password</button>
                    }
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center mb-1">
            <a class="btn btn-secondary m-1" href="/register">Need account?</a>
            <a class="btn btn-secondary m-1" href="/login">Have account?</a>
        </div>
    </div>
</div>

@code {
    PageModel model = new();

    class PageModel
    {
        public bool Initialized { get; set; }
        public bool IsBusy { get; set; }

        string? email;
        public string? Email { get => email ??= string.Empty; set => email = value; }
    }

    protected override void OnInitialized()
    {
        model.Initialized = true;
    }

    async Task OnClickedAsync()
    {
        model.IsBusy = true;
        if (!string.IsNullOrEmpty(model.Email))
        {

        }
        model.IsBusy = false;
    }
}
